/* eslint-disable */
/*! Lazy Load 2.0.0-rc.2 - MIT license - Copyright 2007-2019 Mika Tuupola */
!(function (t, e) {
    typeof exports === 'object'
        ? (module.exports = e(t))
        : typeof define === 'function' && define.amd
        ? define([], e)
        : (t.LazyLoad = e(t));
})(
    typeof global !== 'undefined' ? global : this.window || this.global,
    function (t) {
        'use strict';
        function e(t, e) {
            (this.settings = s(r, e || {})),
                (this.images =
                    t || document.querySelectorAll(this.settings.selector)),
                (this.observer = null),
                this.init();
        }
        typeof define === 'function' && define.amd && (t = window);
        const r = {
            src: 'data-src',
            srcset: 'data-srcset',
            selector: '.lazyload',
            root: null,
            rootMargin: '0px',
            threshold: 0,
        };
        const s = function () {
            const t = {};
            let e = !1;
            let r = 0;
            const o = arguments.length;
            Object.prototype.toString.call(arguments[0]) ===
                '[object Boolean]' && ((e = arguments[0]), r++);
            for (; r < o; r++)
                !(function (r) {
                    for (const o in r)
                        Object.prototype.hasOwnProperty.call(r, o) &&
                            (e &&
                            Object.prototype.toString.call(r[o]) ===
                                '[object Object]'
                                ? (t[o] = s(!0, t[o], r[o]))
                                : (t[o] = r[o]));
                })(arguments[r]);
            return t;
        };
        if (
            ((e.prototype = {
                init: function () {
                    if (!t.IntersectionObserver) return void this.loadImages();
                    const e = this;
                    const r = {
                        root: this.settings.root,
                        rootMargin: this.settings.rootMargin,
                        threshold: [this.settings.threshold],
                    };
                    (this.observer = new IntersectionObserver(function (t) {
                        Array.prototype.forEach.call(t, function (t) {
                            if (t.isIntersecting) {
                                e.observer.unobserve(t.target);
                                const r = t.target.getAttribute(e.settings.src);
                                const s = t.target.getAttribute(
                                    e.settings.srcset
                                );
                                t.target.tagName.toLowerCase() === 'img'
                                    ? (r && (t.target.src = r),
                                      s && (t.target.srcset = s))
                                    : (t.target.style.backgroundImage =
                                          'url(' + r + ')');
                            }
                        });
                    }, r)),
                        Array.prototype.forEach.call(this.images, function (t) {
                            e.observer.observe(t);
                        });
                },
                loadAndDestroy: function () {
                    this.settings && (this.loadImages(), this.destroy());
                },
                loadImages: function () {
                    if (!this.settings) return;
                    const t = this;
                    Array.prototype.forEach.call(this.images, function (e) {
                        const r = e.getAttribute(t.settings.src);
                        const s = e.getAttribute(t.settings.srcset);
                        e.tagName.toLowerCase() === 'img'
                            ? (r && (e.src = r), s && (e.srcset = s))
                            : (e.style.backgroundImage = "url('" + r + "')");
                    });
                },
                destroy: function () {
                    this.settings &&
                        (this.observer.disconnect(), (this.settings = null));
                },
            }),
            (t.lazyload = function (t, r) {
                return new e(t, r);
            }),
            t.jQuery)
        ) {
            const r = t.jQuery;
            r.fn.lazyload = function (t) {
                return (
                    (t = t || {}),
                    (t.attribute = t.attribute || 'data-src'),
                    new e(r.makeArray(this), t),
                    this
                );
            };
        }
        return e;
    }
);
